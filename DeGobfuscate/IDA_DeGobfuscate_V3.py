#https://gist.github.com/alexander-hanel/8f0cd7b53d5e55f73de97de09a0eec8b

import idc
import idaapi
import idautils
import re
import ida_hexrays
import ida_kernwin
import ida_bytes
from idaapi import PluginForm
import ida_netnode
import struct
import binascii
from PyQt5 import QtCore, QtGui, QtWidgets, Qt
import sip
class degobfuscate(idaapi.plugin_t):
    flags = idaapi.PLUGIN_UNL
    comment = "Decrypts gobfuscate xored strings"
    help="https://github.com/Finch4/Malware-Analysis-Reports"
    wanted_name = "DeGobfuscate"
    wanted_hotkey = "Alt-F8"
    
    
    def init(self):
        self.plg = MyPluginFormClass()
        self.plg.Show("DeGobfuscate Strings")
        idaapi.msg("init() called!\n")
        return idaapi.PLUGIN_OK
    
    def to_decimal(self, buffer):
        list_1 = []
        #print(f"Buffer: {buffer}")
        for string in buffer:
            for i in range(0, len(string), 2):
                list_1.append(int(string[i:i+2], 16))
        return list_1

    def run(self, arg):
        for function in idautils.Functions():
            values = {}
            #function = ida_kernwin.get_screen_ea()
            function_start = idc.get_func_attr(function, idc.FUNCATTR_START)
            function_end = idc.get_func_attr(function, idc.FUNCATTR_END)
            function_name = idc.get_func_name(function)
            if re.search("func\d+", function_name):
                try:
                    decompiled_code = str(ida_hexrays.decompile(function))
                    lenght = re.search(r"i < (\w+); \+\+i", decompiled_code)
                    
                    if lenght != None:
                        # Getting hex values displayed in the decompiled code
                        values[function_name] = []
                        for z in re.findall(" = 0[xX]([0-9a-fA-F]+)", decompiled_code):
                                    swapped_list = []
                                    for i in range(0, len(z), 2):
                                        swapped_list.insert(0, z[i:i+2])
                                    z = "".join(map(str, swapped_list))
                                    #print(f"\n{function_name}: {z}")
                                    values[function_name].append(z)
                                    #print(f"Appending: {z} {function_name}")
                        
                        
                        
                        # Getting values from xmmword and unk_ chunks
                        xmmwords = re.findall(r"xmmword_(\w+)", decompiled_code)
                        
                        for xmmword in xmmwords:
                            #print(f"\nxmmword_{xmmword} -> {int(xmmword, 16)}")
                            
                            ida_bytes.create_data(int(xmmword, 16), ida_bytes.byte_flag(), 1, ida_netnode.BADNODE) # create byte at the specified address
                            data = binascii.hexlify(idaapi.get_bytes(int(xmmword, 16), int(lenght.group(1), 16))).decode("windows-1252")
                            values[function_name].append(data)
                            #print(binascii.hexlify(idaapi.get_bytes(int(xmmword, 16), int(lenght, 16)))) # get bytes
                            
                        unks_data = re.findall(r"qmemcpy.*&unk_(.*),", decompiled_code)
                        if unks_data != []:
                            values[function_name] = []
                            for unk in unks_data:
                                unk_data = data = binascii.hexlify(idaapi.get_bytes(int(unk, 16), int(lenght.group(1), 16))).decode("windows-1252")
                                values[function_name].append(unk_data)
                                #print(f"""\n{function_name}
                                #unk_{unk}: {unk_data}
                                #""")
                                #print(f"Appending: {unk_data} {function_name}")
                                   
                                   
                except idaapi.DecompilationFailure:
                    pass
                
                try:
                    lenght = int(len(values[function_name]) / 2)
                    #print(function_name)
                    string = self.to_decimal(values[function_name][0:lenght])
                    key = self.to_decimal(values[function_name][lenght::])
                    # print(f"""
                    # String: {string}
                    # Key: {key}
                    # Lenght: {lenght}
                    # """)
                    str_decrypted = ""
                    for i in range(0, len(key)):
                        str_decrypted += chr(string[i % len(string)] ^ key[i % len(key)])
                        #idaapi.msg(f"\n{hex(string[i % len(string)])} ^ {hex(key[i % len(key)])} {chr(string[i % len(string)] ^ key[i % len(key)])}\n")
                    if str_decrypted != "":    
                         #idaapi.msg("Decrypted: "+str_decrypted+"\n")
                         idc.set_func_cmt(function_start, str_decrypted, 0)
                         rowPosition = self.plg.table.rowCount()
                         self.plg.table.insertRow(rowPosition)
                         self.plg.table.setItem(rowPosition, 0, QtWidgets.QTableWidgetItem(function_name.replace(".","_")))
                         self.plg.table.setItem(rowPosition, 1, QtWidgets.QTableWidgetItem(str_decrypted))
                except:
                    pass
            
            
        
        

    def term(self):
        idaapi.msg("term() called!\n")
        
def PLUGIN_ENTRY():
    return degobfuscate()   
    


class MyPluginFormClass(PluginForm):
    def OnCreate(self, form):
        """
        Called when the widget is created
        """

        # Get parent widget
        self.parent = self.FormToPyQtWidget(form)
        self.PopulateForm()


    def PopulateForm(self):
        # Create layout
        layout = QtWidgets.QVBoxLayout()

        # table 
        self.table = QtWidgets.QTableWidget()
        self.table.setColumnCount(2)
        self.table.setHorizontalHeaderLabels(["Function", "String"])
            
      
        layout.addWidget(self.table)

        # make our created layout the dialogs layout
        self.parent.setLayout(layout)

      
        


    def OnClose(self, form):
        """
        Called when the widget is closed
        """
        pass

    





