#https://gist.github.com/alexander-hanel/8f0cd7b53d5e55f73de97de09a0eec8b

import idc
import idaapi
import idautils
import re
import ida_hexrays
import ida_kernwin
import struct
import binascii
from idaapi import PluginForm
from PyQt5 import QtCore, QtGui, QtWidgets
import sip
class degobfuscate(idaapi.plugin_t):
    flags = idaapi.PLUGIN_UNL
    comment = "Decrypts gobfuscate xored strings"
    help="https://github.com/Finch4/Malware-Analysis-Reports/tree/master/DeGobfuscate"
    wanted_name = "DeGobfuscate"
    wanted_hotkey = "Alt-F8"
    
    
    def init(self):
        self.plg = MyPluginFormClass()
        self.plg.Show("DeGobfuscate Strings")
        idaapi.msg("init() called!\n")
        return idaapi.PLUGIN_OK
    
    def to_decimal(self, buffer):
        list_1 = []
        for string in buffer:
            for i in range(0, len(string), 2):
                list_1.append(int(string[i:i+2], 16))
        return list_1

    def run(self, arg):
        for function in idautils.Functions():
            values = {}
            #function = ida_kernwin.get_screen_ea()
            function_start = idc.get_func_attr(function, idc.FUNCATTR_START)
            function_end = idc.get_func_attr(function, idc.FUNCATTR_END)
            function_name = idc.get_func_name(function)
            if "func" in function_name:
                try:
                    values[function_name] = []
                    for z in re.findall("= (0[xX][0-9a-fA-F]+)",str(ida_hexrays.decompile(function))):
                                values[function_name].append(binascii.hexlify(struct.pack('<Q', int(int(z.replace("0x", ""), base=16)))).decode("windows-1252").replace("00",""))
                                
                               
                except idaapi.DecompilationFailure:
                    pass
                                
                lenght = int(len(values[function_name]) / 2)
                string = self.to_decimal(values[function_name][0:lenght])
                key = self.to_decimal(values[function_name][lenght::])
                str_decrypted = ""
                for i in range(0, len(string)):
                    str_decrypted += chr(string[i] ^ key[i % len(key)])
                    #idaapi.msg(f"{string[i]} ^ {key[i % len(key)]}\n")
                if str_decrypted != "":    
                    #idaapi.msg(str_decrypted+"\n")
                     idc.set_func_cmt(function_start, str_decrypted, 0)
                     rowPosition = self.plg.table.rowCount()
                     self.plg.table.insertRow(rowPosition)
                     self.plg.table.setItem(rowPosition, 0, QtWidgets.QTableWidgetItem(function_name))
                     self.plg.table.setItem(rowPosition, 1, QtWidgets.QTableWidgetItem(str_decrypted))
            
            
        
        

    def term(self):
        idaapi.msg("term() called!\n")
        
def PLUGIN_ENTRY():
    return degobfuscate()   
    


class MyPluginFormClass(PluginForm):
    def OnCreate(self, form):
        """
        Called when the widget is created
        """

        # Get parent widget
        self.parent = self.FormToPyQtWidget(form)
        self.PopulateForm()


    def PopulateForm(self):
        # Create layout
        layout = QtWidgets.QVBoxLayout()

        # table 
        self.table = QtWidgets.QTableWidget()
        self.table.setColumnCount(2)
        self.table.setHorizontalHeaderLabels(["Function", "String"])
              
        

        
        
     
        
      
        layout.addWidget(self.table)

        # make our created layout the dialogs layout
        self.parent.setLayout(layout)

      
        


    def OnClose(self, form):
        """
        Called when the widget is closed
        """
        pass

    



