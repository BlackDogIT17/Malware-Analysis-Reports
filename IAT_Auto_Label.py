# Original Author: AGDCServices - https://github.com/AGDCservices/Ghidra-Scripts - https://www.youtube.com/channel/UCnpn999NpDMMPxZXW8sgZLA - Video Example [Ghidra]: https://youtu.be/wsdPmW0dt0I?t=820
# Converted to IDA: Finch - https://twitter.com/Finch39487976 - Video Example: https://youtu.be/BR65Y2kGxDY
# IAT Dumper: https://github.com/AGDCservices/Misc-Malware-Analysis-Tools/blob/main/Dump_Labeled_Iat_Memory.exe
# Watch the video of AGDCServices to understand how to use it


import idaapi
import ida_kernwin
import ida_ida
import idc
import idautils
import ida_nalt
import random
class myplugin_t(idaapi.plugin_t):
    flags = idaapi.PLUGIN_UNL
    comment = "Label dynamically resolved IAT entries"
    help="https://github.com/Finch4/Malware-Analysis-Reports"
    wanted_name = "IAT Auto Label"
    wanted_hotkey = "Alt-F8"
    def init(self):
        idaapi.msg("init() called!\n")
        return idaapi.PLUGIN_OK
    def run(self, arg):
            def parse_iat(file):
                labeledIatList = open(file, "r").read().splitlines()
                labeledIatDict = dict()
                for i in labeledIatList:
                    cur_rva, cur_iat_label = i.split('\t')
                    labeledIatDict[hex(ida_nalt.get_imagebase() + int(cur_rva, 16))] = cur_iat_label
                return labeledIatDict
            def apply_iat(iat):
                min_ea = ida_ida.inf_get_min_ea()
                max_ea = ida_ida.inf_get_max_ea()
                image_base = ida_nalt.get_imagebase()
                idaapi.msg(f"{hex(min_ea)} - {hex(max_ea)} - {hex(image_base)} \n")
                for i in range(min_ea, max_ea):
                    mnemonic = idc.print_insn_mnem(i)
                    if mnemonic == "call" and str(idc.print_operand(i, 0)).startswith("dword"):
                        try:
                            idc.set_name(idc.get_operand_value(i, 0), iat[hex(idc.get_operand_value(i, 0))]+str(random.randint(0, 1000))) # I added random.randint() because some functions already in the IAT are dynamically resolved again, so renaming them causes a conflict, if you want remove it. (Sample causing the problem: https://bazaar.abuse.ch/sample/49fd52a3f3d1d46dc065217e588d1d29fba4d978cd8fdb2887fd603320540f71/)
                            open("resolved_iat.txt","a").write(f"{hex(idc.get_operand_value(i, 0))}\n")
                        except:
                            open("unresolved_iat.txt","a").write(f"{hex(idc.get_operand_value(i, 0))}\n")
                            
        
            file = ida_kernwin.ask_file(0, "*.txt", "Load IAT")
            idaapi.msg(f"{file} Selected!\n")
            if file == None:
               idaapi.msg("Please select a file!")
            labeled_iat_dump_file_name = parse_iat(file)
            apply_iat(labeled_iat_dump_file_name)
            
        
        

    def term(self):
        idaapi.msg("term() called!\n")
        
def PLUGIN_ENTRY():
    return myplugin_t()

